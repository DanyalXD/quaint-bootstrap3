
require:
   path
   quaint -> etools -> enode-to-data

var gid = 0

special = new Set with {
   ".default"
   ".primary"
   ".success"
   ".info"
   ".warning"
   ".danger"

   ".dismissible"

   ".lg"
   ".sm"
}

root = path.join{__dirname, "..", "bootstrap-3.3.6-dist/"}

enhance{tags, cls, t = 'div'} =
   {t, '.{cls}'} ++
      tags each match tag ->
         when special.has{tag} ->
            '.{cls}-{tag[1..]}'
         else ->
            tag

enhancer{cls, t = 'div'}{tags, props, children} =
   ENode{enhance{tags, cls, t}, props, children}


_dropdown{direction, tags, props, {title, enode-to-data! list}} =
   div %
      class = direction
      button.btn.btn-default.dropdown-toggle %
         type = .button
         "data-toggle" = .dropdown
         "aria-haspopup" = "true"
         "aria-expanded" = "true"
         title
         span.caret %
      ul.dropdown-menu %
         list each match element ->
            {R"^[ \n]*$"?} ->
               li.divider %
            else ->
               li % element

_tabs{type, tags, props, children} =
   {tabs-map >> enode-to-data{tabs-map, true}} =
      children each child when not R"[ \n]+"? child ->
         child
   tabs = enumerate{consume! tabs-map.entries{}} each {i, {title, body}} ->
      {i, title, body, '__btab__{gid += 1}'}
   {
      ul.nav %
         class = 'nav-{type}'
         tabs each {i, title, _, id} ->
            li %
               class = if{i === 0, .active, ""}
               a %
                  "data-toggle" = .tab
                  href = '#{id}'
                  title
      .tab-content %
         tabs each {i, _, contents, id} ->
            div.tab-pane %
               class = if{i === 0, .active, ""}
               id = id
               contents
   }


install{@, options} =

   @register-resources with {
      "bootstrap/css/bootstrap.css" => {
         path = path.join{root, "css/bootstrap.min.css"}
         contents = true
         type = .css
         method = .head
         dependencies = {
            "bootstrap/fonts" => #copy{path.join{root, "fonts/"}}
         }
      }
      "jquery.js" => {
         path = path.join{__dirname, "..", "jquery-1.11.3.min.js"}
         contents = true
         type = .js
         method = .head
      }
      "bootstrap/js/bootstrap.js" => {
         path = path.join{root, "js/bootstrap.min.js"}
         contents = true
         type = .js
         method = .head
      }
   }

   @register-components with {
      ;; TODO
      ;; badge, breadcrumbs
      ;; embed, jumbotron
      ;; list-group, media

      primary{tags, props, children} =
         @components.alert{{".primary"} ++ tags, props, children}
      success{tags, props, children} =
         @components.alert{{".success"} ++ tags, props, children}
      info{tags, props, children} =
         @components.alert{{".info"} ++ tags, props, children}
      warning{tags, props, children} =
         @components.alert{{".warning"} ++ tags, props, children}
      danger{tags, props, children} =
         @components.alert{{".danger"} ++ tags, props, children}

      alert{tags, props, children} =
         ENode with
            enhance{tags, .alert}
            props
            {
               if ".dismissible" in tags:
                  then:
                     button.close %
                        type = .button
                        "data-dismiss" = .alert
                        raw % "&times;"
                  else: {}
               children
            }

      container = enhancer{.container}

      divider = enhancer{.divider}

      dropdown{tags, props, children} =
         _dropdown{.dropdown, tags, props, children}

      dropup{tags, props, children} =
         _dropdown{.dropup, tags, props, children}

      glyph{tags, props, children} =
         {name >> name.trim{}} = children
         span %
            class = 'glyphicon glyphicon-{name}'

      label = enhancer{.label, .span}

      ;; TODO: IMPERFECT
      nav{tags, props, {*brand, enode-to-data! list}} =
         id = '__bnav__{gid += 1}'
         nav.navbar.navbar-default %
            .container-fluid %
               .navbar-header %
                  button.navbar-toggle.collapsed %
                     type = .button
                     "data-toggle" = .collapse
                     "data-target" = '#{id}'
                     "aria-expanded" = .false
                     span.icon-bar %
                     span.icon-bar %
                     span.icon-bar %
                  match brand:
                     [a %]? {=> tags, => props, => children} ->
                        ENode{tags ++ {".navbar-brand"}, props, children}
                     else ->
                        brand
               .collapse.navbar-collapse %
                  id = id
                  ul.nav.navbar-nav %
                     list each entry ->
                        li % entry

      panel{tags, props, children} =
         {title, *body} = children each
            child when not String? child or child.trim{} != "" ->
               child
         ENode with
            enhance{tags, .panel}
            props
            {
               div.panel-heading %
                  match title:
                     ENode? {=> tags, => props, => children} ->
                        ENode{{*tags, ".panel-title"}, props, children}
                     else -> title
               div.panel-body %
                  body
            }

      pills{tags, props, children} =
         _tabs{.pills, tags, props, children}

      table{tags, props, children} =
         ENode{{'table', '.table', *tags}, props, children}

      tabs{tags, props, children} =
         _tabs{.tabs, tags, props, children}

      well = enhancer{.well}
   }

   @register-rules with {
      "!! \\glyph"{engine, {=> glyph}} =
         glyph % glyph.raw{}
   }


main{*match} =
   {@, options = {=}} when @is-quaint-engine ->
      install{@, options}
   {options = {=}} ->
      {@} -> main{@, options}

provide = main

