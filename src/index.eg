
require:
   path

special = new Set with {
   ".default"
   ".primary"
   ".success"
   ".info"
   ".warning"
   ".danger"

   ".dismissible"
}

root = path.join{__dirname, "..", "bootstrap-3.3.6-dist/"}

enhance{tags, cls, t = 'div'} =
   {t, '.{cls}'} ++
      tags each match tag ->
         when special.has{tag} ->
            '.{cls}-{tag[1..]}'
         else ->
            tag

install{@, options} =

   @register-resources with {
      "bootstrap/css/bootstrap.css" => {
         path = path.join{root, "css/bootstrap.min.css"}
         contents = true
         type = .css
         method = .head
         dependencies = {
            "bootstrap/fonts" => #copy{path.join{root, "fonts/"}}
         }
      }
      "jquery.js" => {
         path = path.join{__dirname, "..", "jquery-1.11.3.min.js"}
         contents = true
         type = .js
         method = .head
      }
      "bootstrap/js/bootstrap.js" => {
         path = path.join{root, "js/bootstrap.min.js"}
         contents = true
         type = .js
         method = .head
      }
   }

   @register-components with {
      ;; TODO
      ;; !!glyph
      ;; badge, breadcrumbs, component
      ;; divider, dropdown, dropup, embed, jumbotron
      ;; list-group, media, nav, pills, tabs

      primary{tags, props, children} =
         @components.alert{{".primary"} ++ tags, props, children}
      success{tags, props, children} =
         @components.alert{{".success"} ++ tags, props, children}
      info{tags, props, children} =
         @components.alert{{".info"} ++ tags, props, children}
      warning{tags, props, children} =
         @components.alert{{".warning"} ++ tags, props, children}
      danger{tags, props, children} =
         @components.alert{{".danger"} ++ tags, props, children}

      alert{tags, props, children} =
         ENode with
            enhance{tags, .alert}
            props
            {
               if ".dismissible" in tags:
                  then:
                     button.close %
                        type = .button
                        "data-dismiss" = .alert
                        raw % "&times;"
                  else: {}
               children
            }

      glyph{tags, props, children} =
         {name >> name.trim{}} = children
         span %
            class = 'glyphicon glyphicon-{name}'

      label{tags, props, children} =
         ENode{enhance{tags, .label, .span}, props, children}

      panel{tags, props, children} =
         {title, *body} = children each
            child when not String? child or child.trim{} != "" ->
               child
         ENode with
            enhance{tags, .panel}
            props
            {
               div.panel-heading %
                  match title:
                     ENode? {=> tags, => props, => children} ->
                        ENode{{*tags, ".panel-title"}, props, children}
                     else -> title
               div.panel-body %
                  body
            }

      table{tags, props, children} =
         ENode{{'table', '.table', *tags}, props, children}
   }

main{*match} =
   {@, options = {=}} when @is-quaint-engine ->
      install{@, options}
   {options = {=}} ->
      {@} -> main{@, options}

provide = main

