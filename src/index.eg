
require:
   path
   quaint -> etools ->
      enode-to-data
      trim
   quaint-nav


var gid = 0

glyphs = new Set with {"asterisk", "plus", "euro", "eur", "minus", "cloud", "envelope", "pencil", "glass", "music", "search", "heart", "star", "star-empty", "user", "film", "th-large", "th", "th-list", "ok", "remove", "zoom-in", "zoom-out", "off", "signal", "cog", "trash", "home", "file", "time", "road", "download-alt", "download", "upload", "inbox", "play-circle", "repeat", "refresh", "list-alt", "lock", "flag", "headphones", "volume-off", "volume-down", "volume-up", "qrcode", "barcode", "tag", "tags", "book", "bookmark", "print", "camera", "font", "bold", "italic", "text-height", "text-width", "align-left", "align-center", "align-right", "align-justify", "list", "indent-left", "indent-right", "facetime-video", "picture", "map-marker", "adjust", "tint", "edit", "share", "check", "move", "step-backward", "fast-backward", "backward", "play", "pause", "stop", "forward", "fast-forward", "step-forward", "eject", "chevron-left", "chevron-right", "plus-sign", "minus-sign", "remove-sign", "ok-sign", "question-sign", "info-sign", "screenshot", "remove-circle", "ok-circle", "ban-circle", "arrow-left", "arrow-right", "arrow-up", "arrow-down", "share-alt", "resize-full", "resize-small", "exclamation-sign", "gift", "leaf", "fire", "eye-open", "eye-close", "warning-sign", "plane", "calendar", "random", "comment", "magnet", "chevron-up", "chevron-down", "retweet", "shopping-cart", "folder-close", "folder-open", "resize-vertical", "resize-horizontal", "hdd", "bullhorn", "bell", "certificate", "thumbs-up", "thumbs-down", "hand-right", "hand-left", "hand-up", "hand-down", "circle-arrow-right", "circle-arrow-left", "circle-arrow-up", "circle-arrow-down", "globe", "wrench", "tasks", "filter", "briefcase", "fullscreen", "dashboard", "paperclip", "heart-empty", "link", "phone", "pushpin", "usd", "gbp", "sort", "sort-by-alphabet", "sort-by-alphabet-alt", "sort-by-order", "sort-by-order-alt", "sort-by-attributes", "sort-by-attributes-alt", "unchecked", "expand", "collapse-down", "collapse-up", "log-in", "flash", "log-out", "new-window", "record", "save", "open", "saved", "import", "export", "send", "floppy-disk", "floppy-saved", "floppy-remove", "floppy-save", "floppy-open", "credit-card", "transfer", "cutlery", "header", "compressed", "earphone", "phone-alt", "tower", "stats", "sd-video", "hd-video", "subtitles", "sound-stereo", "sound-dolby", "sound-5-1", "sound-6-1", "sound-7-1", "copyright-mark", "registration-mark", "cloud-download", "cloud-upload", "tree-conifer", "tree-deciduous", "cd", "save-file", "open-file", "level-up", "copy", "paste", "alert", "equalizer", "king", "queen", "pawn", "bishop", "knight", "baby-formula", "tent", "blackboard", "bed", "apple", "erase", "hourglass", "lamp", "duplicate", "piggy-bank", "scissors", "bitcoin", "btc", "xbt", "yen", "jpy", "ruble", "rub", "scale", "ice-lolly", "ice-lolly-tasted", "education", "option-horizontal", "option-vertical", "menu-hamburger", "modal-window", "oil", "grain", "sunglasses", "text-size", "text-color", "text-background", "object-align-top", "object-align-bottom", "object-align-horizontal", "object-align-left", "object-align-vertical", "object-align-right", "triangle-right", "triangle-left", "triangle-bottom", "triangle-top", "console", "superscript", "subscript", "menu-left", "menu-right", "menu-down", "menu-up"}

special = new Set with {
   ".default"
   ".primary"
   ".success"
   ".info"
   ".warning"
   ".danger"

   ".dismissible"

   ".lg"
   ".sm"
}

root = path.join{__dirname, "..", "bootstrap-3.3.6-dist/"}
swatch = path.join{__dirname, "..", "bootswatch/"}

enhance{tags, cls, t = 'div'} =
   {t, '.{cls}'} ++
      tags each match tag ->
         when special.has{tag} ->
            '.{cls}-{tag[1..]}'
         else ->
            tag

enhancer{cls, t = 'div'}{tags, props, children} =
   ENode{enhance{tags, cls, t}, props, children}


_dropdown{direction, tags, props, {title, enode-to-data! list}} =
   div %
      class = direction
      button.btn.btn-default.dropdown-toggle %
         type = .button
         "data-toggle" = .dropdown
         "aria-haspopup" = "true"
         "aria-expanded" = "true"
         title
         span.caret %
      ul.dropdown-menu %
         list each match element ->
            {R"^[ \n]*$"?} ->
               li.divider %
            else ->
               li % element

_tabs{type, tags, props, children} =
   {tabs-map >> enode-to-data{tabs-map, true}} =
      children each child when not R"[ \n]+"? child ->
         child
   tabs = enumerate{consume! tabs-map.entries{}} each {i, {title, body}} ->
      {i, title, body, '__btab__{gid += 1}'}
   {
      ul.nav %
         class = 'nav-{type}'
         tabs each {i, title, _, id} ->
            li %
               class = if{i === 0, .active, ""}
               a %
                  "data-toggle" = .tab
                  href = '#{id}'
                  title
      .tab-content %
         class = 'from-{type}'
         tabs each {i, _, contents, id} ->
            div.tab-pane %
               class = if{i === 0, .active, ""}
               id = id
               contents
   }


default-template = """
doctype :: html
html %
  head %
    title %
      meta::title !! Untitled
    meta %
      http-equiv = Content-type
      content = text/html
      charset = UTF-8
    meta %
      name = viewport
      content = width=device-width, initial-scale=1
  body % {body}
"""

nav-template = """
template :: @minimal
bsnav :: dump!
container % {body}
"""

defaults = {
   nav-container-class = "container-fluid"
}

install{@, _options} =
   options = defaults & _options

   qn-options = {
      ulonly = true
      wrap-dropdown{title} =
         a.dropdown-toggle %
            href = "#"
            "data-toggle" = .dropdown
            role = .button
            "aria-haspopup" = .true
            "aria-expanded" = .false
            title
            span.caret %
      wrap-element{match elem} =
         [a %]? or {"", [a %]?} ->
            elem
         else ->
            p.navbar-text % elem
   }
   quaint-nav{@, qn-options}

   @register-resolvers with {
      template = {
         "@minimal" => default-template
         "@bootstrap" => nav-template
         "@bootstrap3" => nav-template
      }
   }

   @register-macros with {
      brand{engine, body} =
         engine.macros.store{engine, "bootstrap-brand", body}

      bsnav{engine, body} =
         if body.raw{}.trim{} !== "dump!":
            throw E.quaint-bootstrap with
               'bsnav:: macro can only have "dump!" as its body'
         nav-id = "the-collapsible-nav"
         nav.navbar.navbar-default %
            div %
               class = options.nav-container-class
               .navbar-header %
                  button.navbar-toggle.collapsed %
                     type = .button
                     "data-toggle" = .collapse
                     "data-target" = '#{nav-id}'
                     "aria-expanded" = .false
                     span.sr-only % "Toggle navigation"
                     span.icon-bar %
                     span.icon-bar %
                     span.icon-bar %
                  a.navbar-brand %
                     engine.macros.dump{engine, "bootstrap-brand"}
               .collapse.navbar-collapse %
                  id = nav-id
                  inherit.nav.navbar-nav.navbar-left %
                     quaint-nav.dump-nav{@, "left", qn-options}
                  inherit.nav.navbar-nav %
                     quaint-nav.dump-nav{@, "main", qn-options}
                  inherit.nav.navbar-nav.navbar-right %
                     quaint-nav.dump-nav{@, "right", qn-options}
   }

   @register-resources with {
      "bootstrap/css/bootstrap.css" => {
         path =
            match options.theme as f:
               undefined? or "@default" ->
                  path.join{root, "css/bootstrap.min.css"}
               R"^@(.*)"! {_, name} ->
                  path.join{swatch, '{name}/bootstrap.min.css'}
               else ->
                  ;; TODO: resolve f at the proper moment, when options given
                  f
         contents = true
         type = .css
         method = .head
         dependencies = {
            "bootstrap/fonts" => #copy{path.join{root, "fonts/"}}
         }
      }
      "jquery.js" => {
         path = path.join{__dirname, "..", "jquery-1.11.3.min.js"}
         contents = true
         type = .js
         method = .head
      }
      "bootstrap/js/bootstrap.js" => {
         path = path.join{root, "js/bootstrap.min.js"}
         contents = true
         type = .js
         method = .head
      }
   }

   @register-components with {
      ;; TODO
      ;; badge, breadcrumbs
      ;; embed, jumbotron
      ;; list-group, media
      primary{tags, props, children} =
         @components.alert{{".primary"} ++ tags, props, children}
      success{tags, props, children} =
         @components.alert{{".success"} ++ tags, props, children}
      info{tags, props, children} =
         @components.alert{{".info"} ++ tags, props, children}
      warning{tags, props, children} =
         @components.alert{{".warning"} ++ tags, props, children}
      danger{tags, props, children} =
         @components.alert{{".danger"} ++ tags, props, children}

      alert{tags, props, children} =
         ENode with
            enhance{tags, .alert}
            props
            {
               if ".dismissible" in tags:
                  then:
                     button.close %
                        type = .button
                        "data-dismiss" = .alert
                        raw % "&times;"
                  else: {}
               children
            }

      container = enhancer{.container}

      divider = enhancer{.divider}

      dropdown{tags, props, children} =
         _dropdown{.dropdown, tags, props, children}

      dropup{tags, props, children} =
         _dropdown{.dropup, tags, props, children}

      glyph{tags, props, children} =
         {name >> name.trim{}} = children
         span %
            class = 'glyphicon glyphicon-{name}'

      label = enhancer{.label, .span}

      panel{tags, props, children} =
         {title, *body} = children each
            child when not String? child or child.trim{} != "" ->
               child
         ENode with
            enhance{tags, .panel}
            props
            {
               div.panel-heading %
                  match title:
                     ENode? {=> tags, => props, => children} ->
                        ENode{{*tags, ".panel-title"}, props, children}
                     else -> title
               div.panel-body %
                  body
            }

      pills{tags, props, children} =
         _tabs{.pills, tags, props, children}

      table{tags, props, children} =
         ENode{{'table', '.table', *tags}, props, children}

      tabs{tags, props, children} =
         _tabs{.tabs, tags, props, children}

      well = enhancer{.well}
   }

   @register-rules with {
      "!! \\glyph"{engine, {=> glyph}} =
         name = glyph.raw{}
         if not glyphs.has{name}:
            return engine.next
         glyph % name
   }


main{*match} =
   {@, options = {=}} when @is-quaint-engine ->
      install{@, options}
   {options = {=}} ->
      {@} -> main{@, options}

provide = main

